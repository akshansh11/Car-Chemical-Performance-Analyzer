# -*- coding: utf-8 -*-
"""shift.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tG_do7mHn922lQmxkFSiwZdMaUpNTazK
"""

import streamlit as st
import numpy as np
import matplotlib.pyplot as plt

# Load images
logo_path = "shift.jpg"  # company logo
shift_img_path = "shift1.jpg"  # Shift image

# Display the company logo above the title
st.image(logo_path, width=150)

# Title and Description
st.title("Car Chemical Performance Analyzer")
st.write("""
    Explore how different car care coatings perform under various environmental conditions.
    Adjust the conditions to see how Ceramic Coating, Graphene Coating, Polymer Sealant, and Natural Wax react to changes in humidity, temperature, and UV exposure.
""")

# Display the "Shift" image below the title
st.image(shift_img_path, width=300)

# Input Parameters
st.sidebar.header("Environmental Conditions")

humidity = st.sidebar.slider('Humidity (%)', 0, 100, 50)
temperature = st.sidebar.slider('Temperature (°C)', -10, 50, 25)
uv_index = st.sidebar.slider('UV Index', 0, 15, 5)

# Real chemical data for car coatings
chemicals = {
    "Ceramic Coating": {"longevity_factor": 0.95, "uv_sensitivity": 0.1, "temp_sensitivity": 0.3},
    "Graphene Coating": {"longevity_factor": 1.2, "uv_sensitivity": 0.05, "temp_sensitivity": 0.4},
    "Polymer Sealant": {"longevity_factor": 0.8, "uv_sensitivity": 0.2, "temp_sensitivity": 0.5},
    "Natural Wax": {"longevity_factor": 0.6, "uv_sensitivity": 0.4, "temp_sensitivity": 0.6},
}

# Function to compute performance
def compute_performance(chemical, humidity, temperature, uv_index):
    base_performance = chemical["longevity_factor"] * (100 - humidity) / 100
    temp_effect = (1 - chemical["temp_sensitivity"] * abs(temperature - 25) / 50)
    uv_effect = (1 - chemical["uv_sensitivity"] * uv_index / 15)
    return base_performance * temp_effect * uv_effect

# Generate a grid for the contour map
humidity_vals = np.linspace(0, 100, 100)
temperature_vals = np.linspace(-10, 50, 100)
H, T = np.meshgrid(humidity_vals, temperature_vals)

# Plot contour maps for each chemical
fig, axs = plt.subplots(1, len(chemicals), figsize=(15, 5))

for i, (chem_name, chem_props) in enumerate(chemicals.items()):
    performance_vals = compute_performance(chem_props, H, T, uv_index)

    # Contour plot
    contour = axs[i].contourf(H, T, performance_vals, levels=20, cmap="plasma")
    axs[i].set_title(chem_name)
    axs[i].set_xlabel('Humidity (%)')
    axs[i].set_ylabel('Temperature (°C)')
    fig.colorbar(contour, ax=axs[i])

st.pyplot(fig)

# Comparison of chemicals under user-selected conditions
st.subheader(f"Performance under {humidity}% Humidity, {temperature}°C, UV Index {uv_index}")
comparison_data = {}

for chem_name, chem_props in chemicals.items():
    performance = compute_performance(chem_props, humidity, temperature, uv_index)
    comparison_data[chem_name] = round(performance, 2)

st.table(comparison_data)

# Provide insights
best_chemical = max(comparison_data, key=comparison_data.get)
st.success(f"Best performing coating under these conditions: **{best_chemical}**")